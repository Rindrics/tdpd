#+TITLE: Code Smells and Refactoring
#+PROPERTY: header-args :eval no
[[https://learning.oreilly.com/library/view/test-driven-python-development/9781783987924/ch03.html][Go to book Page]]

テストは自信をもって開発するために必須。
過剰なテストも開発を遅らせる。
そのためにリファクタリングが必要。

* A dual crossover moving average
Dual Crossover Moving Average: 短期トレンドの傾向を調べる方法（長期トレンドと比較して）
売り買いの傾向がわかる 短期トレンドが長期トレンドを交差するときの向きから:
- ↑: 買い傾向
- ↓: 売り傾向

さぁ、実装しよう
* Implementing the dual crossover moving average
get_crossover_signalメソッドを実装する
 Stock クラスに

要求は以下:
- 日付を引数としてとり、crosseverがあるかどうかを返す
- 買い傾向なら1を返す
- 売り傾向なら-1を返す
- 交点がないなら0
- その日に更新がないなら、最近の日付を使う
- データが11未満の場合、長期トレンド算出に十分でないと判断して0を返す
* Identifying code smells
本文には、リファクタリング前の、テスト通過直後のコードが示されている。
https://github.com/siddhi/test_driven_python/tree/1eaebe7fb80e9e5762d570d2ed2ba2571a253e80/stock_alerter
読みにくい！
やはりリファクタリングは必須なのだ。
** このコードの問題点はどこか？
- 長いメソッド
- わかりにくい名前
- 複雑な条件分岐
- わかりにくいコメント
- マジックナンバー
- 重複
* Refactoring
** The Rename Variable and Rename Method refactorings
"cpl"がわかりにくい。
closing_price_listにしよう。
** Commenting Styles
コメントがある事自体、bad smellの一つ。
コメントがないと読みづらいコードである可能性がある

ここでは、コメントはそのままにしておく
** Replace Magic Literals with Constants
まずは長期:10日と短期5日の数字から

つづいて、買い、売り、中立の3シグナルを、Enumクラスを使ってわかりやすくする
** The Extract Method refactoring
メソッドをリファクタリングする手順:
- テストを実行
- ブロックの前にも利用されている変数を特定する; これらはパラメータとして渡されるべき
- ブロックの後にも利用されている変数を特定する; これらは返り値となるべきである
- 適切な値を返す新しいメソッドを作る
- コードブロックをメソッドの中に入れ、テストからメソッドを呼び出す
- テストを再実行する

closing_price_list が何度も使われているので、これを返すメソッドを定義しよう。

** Replace Calculation with Temporary Variable
処理を変数に格納することによって、名前をつけよう

** Extract Conditional to Method
条件式をメソッドにして読みやすくする
（これでもけっこう重複があるような...）
** The DRY principle
そう、さっき作ったメソッドは、ほぼ同じことをしていた; 不等号の向きが違うだけだった
なら、比較の順番を変えれば、全く同じ構造になるじゃないか！
ということで。

** Single Responsibility Principle
さてこれまてリファクタリングをしてきたけど、どれも細々したものだった。
どれも劇的なデザイン改善ではなかった

クラスが汚くなる原因はだいたい、Single Responsibility Principle (SRP) に従っていないからだ。
一つのクラスには一つのことをやらせろ。

いま、Stockクラスにやらせていることは:
- 特定の銘柄の価格履歴を保存する
- 銘柄が特定の条件を満たしているか調べる

しかしさらに、次のこともやらせている:
- 1日ごとの終値を計算する
- 移動平均を計算する

これら二つは、独立したクラスにすべきだ！（まじか）

** Extract Class
** Move Method to Class
* The importance of tests
* Excercise
* Wrapping up
* Summary
